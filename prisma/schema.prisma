datasource db {
  provider = "postgresql"
  url      = env("PG_DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  chats         Chat[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model LoginCode {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model DeleteCode {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model Chat {
  id        String    @id @default(cuid())
  userId    String
  name      String?
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MessageFeedback {
  GOOD
  BAD
}

model Message {
  id        String   @id @default(cuid())
  chatId    String
  role      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  feedback MessageFeedback?
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}


model TrialChat {
  id        String    @id @default(cuid())
  name      String?
  messages  TrialMessage[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model TrialMessage {
  id        String   @id @default(cuid())
  chatId    String
  role      String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  feedback MessageFeedback?
  chat      TrialChat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
}